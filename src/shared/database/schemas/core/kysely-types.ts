/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import {
  AuditAction,
  BodyStyleCategory,
  BodyStyleCode,
  DrivetrainType,
  EquipmentLevel,
  FuelType,
  MarketRegion,
  TransmissionType,
  TrimLevel,
  VehicleSegment,
  VehicleStatus
} from "../../../types/enums.ts";
import type { ColumnType, Generated, JSONColumnType } from "kysely";

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;
export type Timestamp = Date;

export interface Coordinates {
  x: number;
  y: number;
  width: number;
  height: number;
}

// ============================================
// CORE TABLES
// ============================================

export interface User {
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<number>;
  name: string;
  password: string;
  resetToken: string | null;
  updatedAt: Generated<Timestamp>;
}

export interface Manufacturer {
  id: Generated<number>;
  publicId: Generated<string>;
  name: string;
  displayName: string;
  slug: string;
  logoImageId: number | null;
  countryCode: string | null;
  description: string | null;
  isActive: Generated<boolean>;
  isVerified: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
  createdBy: string | null;
  updatedBy: string | null;
}

export interface Model {
  id: Generated<number>;
  publicId: Generated<string>;
  manufacturerId: number;
  name: string;
  displayName: string;
  slug: string;
  modelCode: string | null;
  vehicleType: ColumnType<BodyStyleCode, BodyStyleCode, BodyStyleCode>;
  segment: ColumnType<VehicleSegment | null, VehicleSegment | null, VehicleSegment | null>;
  generation: string | null;
  platform: string | null;
  productionStart: number | null;
  productionEnd: number | null;
  primaryMarkets: ColumnType<MarketRegion[], MarketRegion[], MarketRegion[]>;
  status: Generated<VehicleStatus>;
  description: string | null;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
  createdBy: string | null;
  updatedBy: string | null;
}

export interface BodyStyle {
  id: Generated<number>;
  code: ColumnType<BodyStyleCode, BodyStyleCode, BodyStyleCode>;
  name: string;
  category: ColumnType<BodyStyleCategory, BodyStyleCategory, BodyStyleCategory>;
  createdAt: Generated<Timestamp>;
}

export interface Color {
  id: Generated<number>;
  oemCode: string;
  name: string;
  hexValue: string | null;
  rgbValues: number[] | null;
  manufacturerId: number | null;
  createdAt: Generated<Timestamp>;
}

export interface ModelVariation {
  id: Generated<number>;
  publicId: Generated<string>;
  modelId: number;
  name: string;
  variantCode: string | null;
  modelYear: number;
  fuelType: ColumnType<FuelType, FuelType, FuelType>;
  bodyStyleId: number | null;
  transmissionType: ColumnType<TransmissionType | null, TransmissionType | null, TransmissionType | null>;
  drivetrain: ColumnType<DrivetrainType | null, DrivetrainType | null, DrivetrainType | null>;
  marketRegion: ColumnType<MarketRegion, MarketRegion, MarketRegion>;
  countrySpecific: string[] | null;
  engineCode: string | null;
  engineDisplacement: number | null;
  trimLevel: ColumnType<TrimLevel | null, TrimLevel | null, TrimLevel | null>;
  equipmentLevel: ColumnType<EquipmentLevel | null, EquipmentLevel | null, EquipmentLevel | null>;
  vinPattern: string | null;
  wmiCode: string | null;
  defaultColorId: number | null;
  status: Generated<VehicleStatus>;
  isSpecialEdition: Generated<boolean>;
  limitedProduction: Generated<boolean>;
  productionNumber: number | null;
  partsCatalogCode: string | null;
  hasUniqueParts: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
  createdBy: string | null;
  updatedBy: string | null;
  revision: Generated<number>;
  deletedAt: Timestamp | null;
  deletedBy: string | null;
}

export interface VinPrefix {
  id: Generated<number>;
  variationId: number;
  prefix: string;
  prefixLength: number | null;
  description: string | null;
  createdAt: Generated<Timestamp>;
}

export interface VehicleHierarchyAudit {
  id: Generated<number>;
  tableName: string;
  recordId: number;
  action: ColumnType<AuditAction, AuditAction, AuditAction>;
  changedData: JSONColumnType<Record<string, any>>;
  changedBy: string;
  changedAt: Generated<Timestamp>;
}

// ============================================
// PARTS & FILE MANAGEMENT
// ============================================

export interface File {
  id: Generated<number>;
  publicId: string;
  fileName: string;
  originalName: string;
  mimeType: string;
  fileSize: number;
  filePath: string;
  bucket: string;
  provider: string;
  uploadedBy: number | null;
  tags: string[] | null;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
}

export interface PartName {
  id: Generated<number>;
  name: string;
  slug: string;
  publicId: Generated<string>;
  createdAt: Generated<Timestamp>;
}

export interface PartCategory {
  id: Generated<number>;
  name: string;
  slug: string;
  description: string | null;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
}

export interface ModelVariationCategory {
  id: Generated<number>;
  publicId: Generated<string>;
  categoryId: number;
  majorGroupId: string | null;
  displayOrder: number;
  fileId: number | null;
  partListImageId: number | null;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
}

export interface ModelVariationToCategory {
  modelVariationId: number;
  categoryId: number;
  createdAt: Generated<Timestamp>;
}

export interface Part {
  id: Generated<number>;
  publicId: Generated<string>;
  partNameId: number;
  partNumber: string;
  description: string | null;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
}

export interface CategoryPart {
  id: Generated<number>;
  modelVariationCategoryId: number;
  partId: number;
  referenceNumber: number;
  referenceLabel: string;
  coordinates: JSONColumnType<Coordinates[]>;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
}

export interface PartAlternative {
  alternativePartId: number;
  originalPartId: number;
  createdAt: Generated<Timestamp>;
}

export interface Tag {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  name: string;
  slug: string;
  color: string | null;
}

export interface PartTag {
  partId: number;
  tagId: number;
  createdAt: Generated<Timestamp>;
}

// ============================================
// CORE DATABASE INTERFACE
// ============================================

export interface DB {
  user: User;
  manufacturer: Manufacturer;
  model: Model;
  bodyStyle: BodyStyle;
  color: Color;
  modelVariation: ModelVariation;
  vinPrefix: VinPrefix;
  vehicleHierarchyAudit: VehicleHierarchyAudit;
  file: File;
  partName: PartName;
  partCategory: PartCategory;
  modelVariationCategory: ModelVariationCategory;
  modelVariationToCategory: ModelVariationToCategory;
  part: Part;
  categoryPart: CategoryPart;
  partAlternative: PartAlternative;
  tag: Tag;
  partTag: PartTag;
}